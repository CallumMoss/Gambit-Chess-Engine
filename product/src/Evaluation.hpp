#ifndef EVALUATION_HPP
#define EVALUATION_HPP

#include "Types.hpp"
#include "Utils.hpp"
#include "Position.hpp"


namespace Evaluation {
    /**
     * @brief Returns the evaluation from the perspective
     * 
     * @param pos 
     * @return int 
     */
    // This means that if you are in a worse position you will evaluate a negative number irrelevant of which colour you are
    int evaluate(const Position& pos);
    int count_material(const Position& pos, Turn colour);
    int calculate_piece_square_advantage(const Position& pos, Turn colour, bool is_endgame);
    bool is_endgame(const Position& pos);

    // Inspired by: https://www.chessprogramming.org/Simplified_Evaluation_Function

    constexpr int WHITE_PAWN_SQUARE_TABLE[64] =
    {
        0,  0,  0,   0,   0,   0,   0,  0,
        5,  10, 10, -20, -20,  10,  10, 5,
        5, -5, -10,  0,   0,  -10, -5,  5,
        0,  0,  0,   20,  20,  0,   0,  0,
        5,  5,  10,  25,  25,  10,  5,  5,
        10, 10, 20,  30,  30,  20,  10, 10,
        50, 50, 50,  50,  50,  50,  50, 50,
        0,  0,  0,   0,   0,   0,   0,  0
    };

    constexpr int BLACK_PAWN_SQUARE_TABLE[64] =
    { // a1                         h1
        0,  0,  0,   0,   0,  0,   0,  0,
        50, 50, 50,  50,  50, 50,  50, 50,
        10, 10, 20,  30,  30, 20,  10, 10,
        5,  5,  10,  25,  25, 10,  5,  5,
        0,  0,  0,   20,  20, 0,   0,  0,
        5, -5, -10,  0,   0, -10, -5,  5,
        5,  10, 10, -20, -20, 10,  10, 5,
        0,  0,  0,   0,   0,  0,   0,  0 
    };// a8                         h8

    constexpr int WHITE_KNIGHT_SQUARE_TABLE[64] =
    {
        -50, -40, -30, -30, -30, -30, -40, -50,
        -40, -20,  0,   5,   5,   0,  -20, -40,
        -30,  5,   10,  15,  15,  10,  5,  -30,
        -30,  0,   15,  20,  20,  15,  0,  -30,
        -30,  5,   15,  20,  20,  15,  5,  -30,
        -30,  0,   10,  15,  15,  10,  0,  -30,
        -40, -20,  0,   0,   0,   0,  -20, -40,
        -50, -40, -30, -30, -30, -30, -40, -50        
    };

    constexpr int BLACK_KNIGHT_SQUARE_TABLE[64] =
    {
        -50, -40, -30, -30, -30, -30, -40, -50,
        -40, -20,  0,   0,   0,   0,  -20, -40,
        -30,  0,   10,  15,  15,  10,  0,  -30,
        -30,  5,   15,  20,  20,  15,  5,  -30,
        -30,  0,   15,  20,  20,  15,  0,  -30,
        -30,  5,   10,  15,  15,  10,  5,  -30,
        -40, -20,  0,   5,   5,   0,  -20, -40,
        -50, -40, -30, -30, -30, -30, -40, -50
    };

    constexpr int WHITE_BISHOP_SQUARE_TABLE[64] =
    {
        -20, -10, -10, -10, -10, -10, -10, -20,
        -10,  5,   0,   0,   0,   0,   5,  -10,
        -10,  10,  10,  10,  10,  10,  10, -10,
        -10,  0,   10,  10,  10,  10,  0,  -10,
        -10,  5,   5,   10,  10,  5,   5,  -10,
        -10,  0,   5,   10,  10,  5,   0,  -10,
        -10,  0,   0,   0,   0,   0,   0,  -10,
        -20, -10, -10, -10, -10, -10, -10, -20,
    };

    constexpr int BLACK_BISHOP_SQUARE_TABLE[64] =
    {
        -20, -10, -10, -10, -10, -10, -10, -20,
        -10,  0,   0,   0,   0,   0,  0,   -10,
        -10,  0,   5,   10,  10,  5,  0,   -10,
        -10,  5,   5,   10,  10,  5,   5,  -10,
        -10,  0,   10,  10,  10,  10,  0,  -10,
        -10,  10,  10,  10,  10,  10,  10, -10,
        -10,  5,   0,   0,   0,   0,   5,  -10,
        -20, -10, -10, -10, -10, -10, -10, -20,
    };

    // Values centralising rooks as a core chess principle
    constexpr int WHITE_ROOK_SQUARE_TABLE[64] = 
    {
         0, 0,  0,  5,  5,  0,  0,  0,
        -5, 0,  0,  0,  0,  0,  0, -5,
        -5, 0,  0,  0,  0,  0,  0, -5,
        -5, 0,  0,  0,  0,  0,  0, -5,
        -5, 0,  0,  0,  0,  0,  0, -5,
        -5, 0,  0,  0,  0,  0,  0, -5,
         5, 10, 10, 10, 10, 10, 10, 5,
         0, 0,  0,  0,  0,  0,  0,  0
    };

    constexpr int BLACK_ROOK_SQUARE_TABLE[64] = 
    {
        0,  0,  0,  0,  0,  0,  0,   0,
        5,  10, 10, 10, 10, 10, 10,  5,
        -5, 0,  0,  0,  0,  0,  0,  -5,
        -5, 0,  0,  0,  0,  0,  0,  -5,
        -5, 0,  0,  0,  0,  0,  0,  -5,
        -5, 0,  0,  0,  0,  0,  0,  -5,
        -5, 0,  0,  0,  0,  0,  0,  -5,
         0, 0,  0,  5,  5,  0,  0,   0
    };

    constexpr int QUEEN_SQUARE_TABLE[64] = 
    {
        -20, -10, -10, -5, -5, -10, -10, -20,
        -10,  0,   0,   0,  0,  0,   0,  -10,
        -10,  0,   5,   5,  5,  5,   0,  -10,
        -5,   0,   5,   5,  5,  5,   0,  -5,
        -5,   0,   5,   5,  5,  5,   0,  -5,
        -10,  0,   5,   5,  5,  5,   0,  -10,
        -10,  0,   0,   0,  0,  0,   0,  -10,
        -20, -10, -10, -5, -5, -10, -10, -20
    };

    constexpr int WHITE_KING_SQUARE_TABLE[64] =
    {
         20,  30,  10,  0,   0,   10,  30,  20,
         20,  20,  0,   0,   0,   0,   20,  20,
        -10, -20, -20, -20, -20, -20, -20, -10,
        -20, -30, -30, -40, -40, -30, -30, -20,
        -30, -40, -40, -50, -50, -40, -40, -30,
        -30, -40, -40, -50, -50, -40, -40, -30,
        -30, -40, -40, -50, -50, -40, -40, -30,
        -30, -40, -40, -50, -50, -40, -40, -30
    };

    constexpr int BLACK_KING_SQUARE_TABLE[64] = 
    {
        -30, -40, -40, -50, -50, -40, -40, -30,
        -30, -40, -40, -50, -50, -40, -40, -30,
        -30, -40, -40, -50, -50, -40, -40, -30,
        -30, -40, -40, -50, -50, -40, -40, -30,
        -20, -30, -30, -40, -40, -30, -30, -20,
        -10, -20, -20, -20, -20, -20, -20, -10,
         20,  20,   0,   0,   0,   0,  20,  20,
         20,  30,  10,   0,   0,  10,  30,  20
    };

    constexpr int WHITE_KING_SQUARE_TABLE_END_GAME[64] =
    {
        -50, -40, -30, -20, -20, -30, -40, -50,
        -30, -20,  0,   0,   0,   0,  -20, -30,
        -30, -10,  20,  30,  30,  20, -10, -30,
        -30, -10,  30,  40,  40,  30, -10, -30,
        -30, -10,  30,  40,  40,  30, -10, -30,
        -30, -10,  20,  30,  30,  20, -10, -30,
        -30, -20,  0,   0,   0,   0,  -20, -30,
        -50, -40, -30, -30, -30, -30, -40, -50
    };

    constexpr int BLACK_KING_SQUARE_TABLE_END_GAME[64] =
    {
        -50, -40, -30, -30, -30, -30, -40, -50,
        -30, -20,  0,   0,   0,   0,  -20, -30,
        -30, -10,  20,  30,  30,  20, -10, -30,
        -30, -10,  30,  40,  40,  30, -10, -30,
        -30, -10,  30,  40,  40,  30, -10, -30,
        -30, -10,  20,  30,  30,  20, -10, -30,
        -30, -20,  0,   0,   0,   0,  -20, -30,
        -50, -40, -30, -20, -20, -30, -40, -50
    };
}

#endif // #ifndef EVALUATION_HPP