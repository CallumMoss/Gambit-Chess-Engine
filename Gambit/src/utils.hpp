#ifndef UTILS_HPP
#define UTILS_HPP

#include <cstdint>
#include <array>
#include <string>
#include <iostream>
#include "Types.hpp"
struct Move {
    unsigned int src_square: 6;
    unsigned int dest_square: 6;
    unsigned int flags: 4;
};

enum Piece
{
    PAWN = 0,
    KNIGHT = 1,
    BISHOP = 2,
    ROOK = 3,
    QUEEN = 4,
    KING = 5,
    INVALID = -1
};

enum Colour
{
    WHITE = 0,
    BLACK = 1
};

enum Castling_Rights
{
    WHITE_SHORT = 0,
    WHITE_LONG = 1,
    BLACK_SHORT = 2,
    BLACK_LONG = 3
};
namespace Utils {
    u64 shift_up(u64 board); // replace bit with 0, replace bit shifted 8 left with 1
    u64 shift_down(u64 board);
    u64 shift_left(u64 board);
    u64 shift_right(u64 board);
    bool piece_is_at_square(uint64_t board, int square);
    u64 get_ls1b(u64 board); // gets the least significant bit that is 1 (furthest right in bitstring)
    void PrintBB(u64 board, int board_center, bool mirrored);

    // Credit for precomputations of KNIGHT_ATTACKS and KING_ATTACKS to https://github.com/simpleguy747/MollyChessBot/blob/initial-commit-fen-parser/src/attacks.c
    // A knight's attacks for any given square is all the pseudo-legal squares it could move to (meaning it doesnt take into account whether your own pieces are on those squares etc)
    constexpr u64 KNIGHT_ATTACKS[64] = {
        0x0000000000020400ULL, 0x0000000000050800ULL, 0x00000000000A1100ULL, 0x0000000000142200ULL, 0x0000000000284400ULL, 0x0000000000508800ULL, 0x0000000000A01000ULL, 0x0000000000402000ULL,
        0x0000000002040004ULL, 0x0000000005080008ULL, 0x000000000A110011ULL, 0x0000000014220022ULL, 0x0000000028440044ULL, 0x0000000050880088ULL, 0x00000000A0100010ULL, 0x0000000040200020ULL,
        0x0000000204000402ULL, 0x0000000508000805ULL, 0x0000000A1100110AULL, 0x0000001422002214ULL, 0x0000002844004428ULL, 0x0000005088008850ULL, 0x000000A0100010A0ULL, 0x0000004020002040ULL,
        0x0000020400040200ULL, 0x0000050800080500ULL, 0x00000A1100110A00ULL, 0x0000142200221400ULL, 0x0000284400442800ULL, 0x0000508800885000ULL, 0x0000A0100010A000ULL, 0x0000402000204000ULL,
        0x0002040004020000ULL, 0x0005080008050000ULL, 0x000A1100110A0000ULL, 0x0014220022140000ULL, 0x0028440044280000ULL, 0x0050880088500000ULL, 0x00A0100010A00000ULL, 0x0040200020400000ULL,
        0x0204000402000000ULL, 0x0508000805000000ULL, 0x0A1100110A000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL, 0x5088008850000000ULL, 0xA0100010A0000000ULL, 0x4020002040000000ULL,
        0x0400040200000000ULL, 0x0800080500000000ULL, 0x1100110A00000000ULL, 0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL, 0x100010A000000000ULL, 0x2000204000000000ULL,
        0x0004020000000000ULL, 0x0008050000000000ULL, 0x00110A0000000000ULL, 0x0022140000000000ULL, 0x0044280000000000ULL, 0x0088500000000000ULL, 0x0010A00000000000ULL, 0x0020400000000000ULL
    };
    
    constexpr u64 KING_ATTACKS[64] = {
        0x0000000000000302ULL, 0x0000000000000705ULL, 0x0000000000000E0AULL, 0x0000000000001C14ULL, 0x0000000000003828ULL, 0x0000000000007050ULL, 0x000000000000E0A0ULL, 0x000000000000C040ULL,
        0x0000000000030203ULL, 0x0000000000070507ULL, 0x00000000000E0A0EULL, 0x00000000001C141CULL, 0x0000000000382838ULL, 0x0000000000705070ULL, 0x0000000000E0A0E0ULL, 0x0000000000C040C0ULL,
        0x0000000003020300ULL, 0x0000000007050700ULL, 0x000000000E0A0E00ULL, 0x000000001C141C00ULL, 0x0000000038283800ULL, 0x0000000070507000ULL, 0x00000000E0A0E000ULL, 0x00000000C040C000ULL,
        0x0000000302030000ULL, 0x0000000705070000ULL, 0x0000000E0A0E0000ULL, 0x0000001C141C0000ULL, 0x0000003828380000ULL, 0x0000007050700000ULL, 0x000000E0A0E00000ULL, 0x000000C040C00000ULL,
        0x0000030203000000ULL, 0x0000070507000000ULL, 0x00000E0A0E000000ULL, 0x00001C141C000000ULL, 0x0000382838000000ULL, 0x0000705070000000ULL, 0x0000E0A0E0000000ULL, 0x0000C040C0000000ULL,
        0x0003020300000000ULL, 0x0007050700000000ULL, 0x000E0A0E00000000ULL, 0x001C141C00000000ULL, 0x0038283800000000ULL, 0x0070507000000000ULL, 0x00E0A0E000000000ULL, 0x00C040C000000000ULL,
        0x0302030000000000ULL, 0x0705070000000000ULL, 0x0E0A0E0000000000ULL, 0x1C141C0000000000ULL, 0x3828380000000000ULL, 0x7050700000000000ULL, 0xE0A0E00000000000ULL, 0xC040C00000000000ULL,
        0x0203000000000000ULL, 0x0507000000000000ULL, 0x0A0E000000000000ULL, 0x141C000000000000ULL, 0x2838000000000000ULL, 0x5070000000000000ULL, 0xA0E0000000000000ULL, 0x40C0000000000000ULL
    };

    // Credit for precomputations of ROOK_ATTACKS, BISHOP_MOVES and QUEEN_MOVES to https://github.com/TiltedDFA
	constexpr u64 QUEEN_ATTACKS[64] = { 
        9313761861428380670ULL, 180779649147209725ULL, 289501704256556795ULL, 578721933553179895ULL, 1157442771889699055ULL, 2314886638996058335ULL, 4630054752952049855ULL, 9332167099941961855ULL,
        4693051017133293059ULL, 9386102034266586375ULL, 325459994840333070ULL, 578862399937640220ULL, 1157444424410132280ULL, 2315169224285282160ULL, 4702396038313459680ULL, 9404792076610076608ULL,
        2382695595002168069ULL, 4765391190004401930ULL, 9530782384287059477ULL, 614821794359483434ULL, 1157867469641037908ULL, 2387511058326581416ULL, 4775021017124823120ULL, 9550042029937901728ULL,
        1227517888139822345ULL, 2455035776296487442ULL, 4910072647826412836ULL, 9820426766351346249ULL, 1266167048752878738ULL, 2460276499189639204ULL, 4920271519124312136ULL, 9840541934442029200ULL,
        649930110732142865ULL, 1299860225776030242ULL, 2600000831312176196ULL, 5272058161445620104ULL, 10544115227674579473ULL, 2641485286422881314ULL, 5210911883574396996ULL, 10421541192660455560ULL,
        361411684042608929ULL, 722824471891812930ULL, 1517426162373248132ULL, 3034571949281478664ULL, 6068863523097809168ULL, 12137446670713758241ULL, 5827868887957914690ULL, 11583398706901190788ULL,
        287670746360127809ULL, 575624067208594050ULL, 1079472019650937860ULL, 2087167920257370120ULL, 4102559721436811280ULL, 8133343319517438240ULL, 16194909420462031425ULL, 13871017173176583298ULL,
        18303478847064064385ULL, 18232552689433215490ULL, 18090419998706369540ULL, 17806153522019305480ULL, 17237620560088797200ULL, 16100553540994408480ULL, 13826139127340482880ULL, 9205534180971414145ULL
    };

	constexpr u64 BISHOP_ATTACKS[64] = { 
        9241421688590303744ULL, 36099303471056128ULL, 141012904249856ULL, 550848566272ULL, 6480472064ULL, 1108177604608ULL, 283691315142656ULL, 72624976668147712ULL,
        4620710844295151618ULL, 9241421688590368773ULL, 36099303487963146ULL, 141017232965652ULL, 1659000848424ULL, 283693466779728ULL, 72624976676520096ULL, 145249953336262720ULL,
        2310355422147510788ULL, 4620710844311799048ULL, 9241421692918565393ULL, 36100411639206946ULL, 424704217196612ULL, 72625527495610504ULL, 145249955479592976ULL, 290499906664153120ULL,
        1155177711057110024ULL, 2310355426409252880ULL, 4620711952330133792ULL, 9241705379636978241ULL, 108724279602332802ULL, 145390965166737412ULL, 290500455356698632ULL, 580999811184992272ULL,
        577588851267340304ULL, 1155178802063085600ULL, 2310639079102947392ULL, 4693335752243822976ULL, 9386671504487645697ULL, 326598935265674242ULL, 581140276476643332ULL, 1161999073681608712ULL,
        288793334762704928ULL, 577868148797087808ULL, 1227793891648880768ULL, 2455587783297826816ULL, 4911175566595588352ULL, 9822351133174399489ULL, 1197958188344280066ULL, 2323857683139004420ULL,
        144117404414255168ULL, 360293502378066048ULL, 720587009051099136ULL, 1441174018118909952ULL, 2882348036221108224ULL, 5764696068147249408ULL, 11529391036782871041ULL, 4611756524879479810ULL,
        567382630219904ULL, 1416240237150208ULL, 2833579985862656ULL, 5667164249915392ULL, 11334324221640704ULL, 22667548931719168ULL, 45053622886727936ULL, 18049651735527937ULL
    };
	
    constexpr u64 ROOK_ATTACKS[64] = { 
        72340172838076926ULL, 144680345676153597ULL, 289360691352306939ULL, 578721382704613623ULL, 1157442765409226991ULL, 2314885530818453727ULL, 4629771061636907199ULL, 9259542123273814143ULL,
        72340172838141441ULL, 144680345676217602ULL, 289360691352369924ULL, 578721382704674568ULL, 1157442765409283856ULL, 2314885530818502432ULL, 4629771061636939584ULL, 9259542123273813888ULL,
        72340172854657281ULL, 144680345692602882ULL, 289360691368494084ULL, 578721382720276488ULL, 1157442765423841296ULL, 2314885530830970912ULL, 4629771061645230144ULL, 9259542123273748608ULL,
        72340177082712321ULL, 144680349887234562ULL, 289360695496279044ULL, 578721386714368008ULL, 1157442769150545936ULL, 2314885534022901792ULL, 4629771063767613504ULL, 9259542123257036928ULL,
        72341259464802561ULL, 144681423712944642ULL, 289361752209228804ULL, 578722409201797128ULL, 1157443723186933776ULL, 2314886351157207072ULL, 4629771607097753664ULL, 9259542118978846848ULL,
        72618349279904001ULL, 144956323094725122ULL, 289632270724367364ULL, 578984165983651848ULL, 1157687956502220816ULL, 2315095537539358752ULL, 4629910699613634624ULL, 9259541023762186368ULL,
        143553341945872641ULL, 215330564830528002ULL, 358885010599838724ULL, 645993902138460168ULL, 1220211685215703056ULL, 2368647251370188832ULL, 4665518383679160384ULL, 9259260648297103488ULL,
        18302911464433844481ULL, 18231136449196065282ULL, 18087586418720506884ULL, 17800486357769390088ULL, 17226286235867156496ULL, 16077885992062689312ULL, 13781085504453754944ULL, 9187484529235886208ULL
    };	

    // Precalculations of moves without edges, making use of the bitboard to ULL site: https://tearth.dev/bitboard-viewer/
    constexpr u64 ROOK_ATTACKS_NO_EDGES[64] = { 
        282578800148862ULL, 565157600297596ULL, 1130315200595066ULL, 2260630401190006ULL, 4521260802379886ULL, 9042521604759646ULL, 18085043209519166ULL, 36170086419038334ULL,
        282578800180736ULL, 565157600328704ULL, 1130315200625152ULL, 2260630401218048ULL, 4521260802403840ULL, 9042521604775424ULL, 18085043209518592ULL, 36170086419037696ULL,
        282578808340736ULL, 565157608292864ULL, 1130315208328192ULL, 2260630408398848ULL, 4521260808540160ULL, 9042521608822784ULL, 18085043209388032ULL, 36170086418907136ULL,
        282580897300736ULL, 565159647117824ULL, 1130317180306432ULL, 2260632246683648ULL, 4521262379438080ULL, 9042522644946944ULL, 18085043175964672ULL, 36170086385483776ULL,
        283115671060736ULL, 565681586307584ULL, 1130822006735872ULL, 2261102847592448ULL, 4521664529305600ULL, 9042787892731904ULL, 18085034619584512ULL, 36170077829103616ULL,
        420017753620736ULL, 699298018886144ULL, 1260057572672512ULL, 2381576680245248ULL, 4624614895390720ULL, 9110691325681664ULL, 18082844186263552ULL, 36167887395782656ULL,
        35466950888980736ULL, 34905104758997504ULL, 34344362452452352ULL, 33222877839362048ULL, 30979908613181440ULL, 26493970160820224ULL, 17522093256097792ULL, 35607136465616896ULL,
        9079539427579068672ULL, 8935706818303361536ULL, 8792156787827803136ULL, 8505056726876686336ULL, 7930856604974452736ULL, 6782456361169985536ULL, 4485655873561051136ULL, 9115426935197958144ULL
    };	
    
}
#endif // #ifndef UTILS_HPP